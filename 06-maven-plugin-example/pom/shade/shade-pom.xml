<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <artifactId>study-example-java-impl</artifactId>
        <groupId>com.chifuyong</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>06-maven-plugin-example</artifactId>

    <dependencies>
        <!-- SpringMVC 依赖-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.0.RELEASE</version>
        </dependency>
        <!-- MySQL数据库驱动 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.13</version>
        </dependency>
        <!-- druid数据库连接池 ，里面依赖了jdk里的jar包-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.0.9</version>
        </dependency>
        <!-- 测试 provided ，打包不会被打进去 。-->
        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-jasper</artifactId>
            <version>9.0.12</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- maven-shade-plugin 打包配置 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <configuration>
                    <!--只包含该项目代码中用到的jar,在父项目中引入了，但在当前模块中没有用到就会被删掉-->
                    <minimizeJar>true</minimizeJar>
                    <!-- 把依赖的 Jar 包里的类路径改掉，到时候工程里类引用到这里的 jar 包 import 类也会被改掉（相当于这个jar包是自己写的）-->
                    <relocations>
                        <relocation>
                            <pattern>com.alibaba.druid</pattern>
                            <shadedPattern>com.chifuyong.druid</shadedPattern>
                            <excludes>
                                <!-- 排除某个类 -->
                                <exclude>com.alibaba.druid.Constants</exclude>
                            </excludes>
                        </relocation>
                    </relocations>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <!--在原有 jar 名后添加一个 shade 打包的标识和原本的 jar 做区分-->
                            <shadedArtifactAttached>true</shadedArtifactAttached>
                            <shadedClassifierName>test</shadedClassifierName>
                            <!--在打包过程中对文件做一些处理工作-->
                            <transformers>
                                <!-- 改动 MANIFEST.MF信息，可设置入口类方法-->
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <manifestEntries>
                                        <mainClass>com.chifuyong.TestDemo</mainClass>
                                        <Build-Number>3545</Build-Number>
                                        <Built-By>guan</Built-By>
                                        <X-Compile-Source-JDK>1.8</X-Compile-Source-JDK>
                                        <X-Compile-Target-JDK>1.8</X-Compile-Target-JDK>
                                    </manifestEntries>
                                </transformer>
                                <!--阻止META-INF/LICENSE和META-INF/LICENSE.txt-->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ApacheLicenseResourceTransformer"/>
                                <!--合并所有notice文件-->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ApacheNoticeResourceTransformer">
                                    <addHeader>true</addHeader>
                                </transformer>
                                <!--如果多个jar包在META-INF文件夹下含有相同的文件，那么需要将他们合并到一个文件里-->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/spring.handlers</resource>
                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/spring.schemas</resource>
                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/spring.factories</resource>
                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/spring.tld</resource>
                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/spring-form.tld</resource>
                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/spring.tooling</resource>
                                </transformer>
                                <!--如果多个jar包在META-INF文件夹下含有相同的xml文件，则需要聚合他们-->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ComponentsXmlResourceTransformer"/>
                                <!--排除掉指定资源文件-->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.DontIncludeResourceTransformer">
                                    <resource>.no_need</resource>
                                </transformer>
                                <!--将项目下的文件file额外加到resource中-->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                                    <resource>META-INF/pom_test</resource>
                                    <file>pom.xml</file>
                                </transformer>
                                <!--整合spi服务中META-INF/services/文件夹的相关配置-->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>